{"ast":null,"code":"var _jsxFileName = \"D:\\\\react_apps\\\\noteapp\\\\project2\\\\src\\\\components\\\\NoteList.js\",\n  _s = $RefreshSig$();\n// NoteList.js\nimport React, { useState, useEffect } from 'react';\nimport './NoteList.css';\nimport Note from './Note';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction NoteList({\n  deleteNote\n}) {\n  _s();\n  const [notes, setNotes] = useState([]);\n  useEffect(() => {\n    const fetchNotes = async () => {\n      try {\n        const response = await fetch('http://localhost:3000/notestable'); // Update the URL to include the full address\n        if (response.ok) {\n          const data = await response.json();\n          setNotes(data);\n        } else {\n          console.error('Failed to fetch notes');\n        }\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    };\n    fetchNotes();\n  }, []); // Run once when component mounts\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"note-list\",\n    children: notes.map(note => /*#__PURE__*/_jsxDEV(Note, {\n      note: note,\n      deleteNote: deleteNote\n    }, note.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n_s(NoteList, \"vOaC7rmji7ux6HtcIeocV+tl1oY=\");\n_c = NoteList;\nexport default NoteList;\nvar _c;\n$RefreshReg$(_c, \"NoteList\");","map":{"version":3,"names":["React","useState","useEffect","Note","jsxDEV","_jsxDEV","NoteList","deleteNote","_s","notes","setNotes","fetchNotes","response","fetch","ok","data","json","console","error","className","children","map","note","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/react_apps/noteapp/project2/src/components/NoteList.js"],"sourcesContent":["// NoteList.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport './NoteList.css';\r\nimport Note from './Note';\r\n\r\nfunction NoteList({ deleteNote }) {\r\n  const [notes, setNotes] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchNotes = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:3000/notestable'); // Update the URL to include the full address\r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          setNotes(data);\r\n        } else {\r\n          console.error('Failed to fetch notes');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error:', error);\r\n      }\r\n    };\r\n    fetchNotes();\r\n  }, []); // Run once when component mounts\r\n\r\n  return (\r\n    <div className=\"note-list\">\r\n      {notes.map((note) => (\r\n        <Note key={note.id} note={note} deleteNote={deleteNote} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NoteList;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,gBAAgB;AACvB,OAAOC,IAAI,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,QAAQA,CAAC;EAAEC;AAAW,CAAC,EAAE;EAAAC,EAAA;EAChC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACd,MAAMS,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAkC,CAAC,CAAC,CAAC;QAClE,IAAID,QAAQ,CAACE,EAAE,EAAE;UACf,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;UAClCN,QAAQ,CAACK,IAAI,CAAC;QAChB,CAAC,MAAM;UACLE,OAAO,CAACC,KAAK,CAAC,uBAAuB,CAAC;QACxC;MACF,CAAC,CAAC,OAAOA,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAChC;IACF,CAAC;IACDP,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEN,OAAA;IAAKc,SAAS,EAAC,WAAW;IAAAC,QAAA,EACvBX,KAAK,CAACY,GAAG,CAAEC,IAAI,iBACdjB,OAAA,CAACF,IAAI;MAAemB,IAAI,EAAEA,IAAK;MAACf,UAAU,EAAEA;IAAW,GAA5Ce,IAAI,CAACC,EAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAuC,CAC1D;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAACnB,EAAA,CA3BQF,QAAQ;AAAAsB,EAAA,GAARtB,QAAQ;AA6BjB,eAAeA,QAAQ;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}